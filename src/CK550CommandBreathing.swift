//
//  CK550CommandBreathing.swift
//  ck550-cli
//
//  Created by Michal Duda on 03/12/2018.
//  Copyright Â© 2018 Michal Duda. All rights reserved.
//

import Foundation

extension CK550Command {

    private struct OffEffectBreathingSpeedBytes {
        static func bytes(speed: OffEffectBreathingSpeed) -> [uint8] {
            switch speed {
            case .Lowest:
                return [0x08, 0x01]
            case .Lower:
                return [0x0A, 0x02]
            case .Middle:
                return [0x0C, 0x04]
            case .Higher:
                return [0x07, 0x04]
            case .Highest:
                return [0x09, 0x09]
            }
        }
    }

    enum OffEffectBreathingSpeed: uint8 {
        typealias RawValue = uint8
        case Lowest = 0x00
        case Lower = 0x01
        case Middle = 0x02
        case Higher = 0x03
        case Highest = 0x04
    }

    static var setOffEffectBreathingUNKNOWN_BEFORE_PACKETS: [uint8] {
        get {
            return newCommand(request: [0x56, 0x81, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x88, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
        }
    }

    static func setOffEffectBreathing(speed: OffEffectBreathingSpeed, color: RGBColor? = nil) -> [[uint8]] {
        var result: [[uint8]] = [
            [0x56, 0x83, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0xC1, 0x08, 0x00, 0x00, 0x00, 0xFE, 0xFD, 0xFC, 0xFF, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
        ]

        if let color = color {
            result[0][16] = UInt8(color.red)
            result[0][17] = UInt8(color.green)
            result[0][18] = UInt8(color.blue)
            result[0][20] = 0x01
        } else {
            result[0][16] = 0xFE
            result[0][17] = 0xFD
            result[0][18] = 0xFC
            result[0][20] = 0x03
        }

        let bytes = OffEffectBreathingSpeedBytes.bytes(speed: speed)
        result[0][12] = bytes[0]
        result[0][22] = bytes[1]

        return result
    }
}
